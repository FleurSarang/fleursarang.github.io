{"version":3,"sources":["Components/TableForm.js","Containers/InfoTableContainer.js","Containers/BasicInfo.js","Containers/TitleRow.js","Components/BasicTable.js","Containers/SwatchTable.js","utils/constants.js","Containers/SexInfo.js","Containers/SizeInifo.js","Styles/styles.js","Containers/StartStitches.js","Containers/SleevesInfo.js","Containers/AppMain.js","App.js","reportWebVitals.js","index.js"],"names":["TableForm","props","label","txtInfo","feildLen","length","colSize","labelColSize","Fragment","Grid","container","spacing","padding","flexdirection","justify","justifyContent","alignItems","item","xs","sm","lg","Typography","color","align","sx","mt","fontSize","fontWeight","map","info","idx","variant","id","txtLabel","onChange","type","value","others","TextField","name","fullWidth","autoComplete","inputProps","inputMode","pattern","InputProps","endAdornment","InputAdornment","position","InfoTableContainer","Paper","my","md","p","children","BasicInfo","basicInfo","required","TitleRow","titles","Math","round","title","m","BasicTable","printDirection","items","bg","repeat","gridTemplateColumns","colors","bgcolor","style","width","Box","display","columnGap","rowGap","borderRadius","textAlign","SwatchTable","context","useContext","appContext","useState","contractionSts","setContractionSts","contractionRows","setContractionRows","useEffect","beforeSts","afterSts","toFixed","beforeRows","afterRows","swatchInfo","e","setBeforeSts","target","setBeforeRows","setAfterSts","setAfterRows","results","data","res","BRAND_YOUTUBE","BRAND_INSTAGRAM","BRAND_RAVELRY","BRAND_ETSY","COLOR_PRIMARY_LIGHT","COLOR_WHITE","RADIO_SEX_FEMAILE","SexInfo","sexInfo","FormControlLabel","control","Radio","size","RadioGroup","row","selectedSex","setSelectedSex","placeSelf","SizeInfo","divSleeves","setdivSleeves","neckBack","totalSts","setTotalSts","raglanSts","divide","setSleeveStartSts","sleeveStartSts","frontStartSt","back","setBackStartSts","sizeInfo","setNeckBack","setRaglanSts","backStartSts","linkStyle","styled","generateBrandStyles","brand","brandColor","getBrandColor","link","StartStitches","startInfos","RADIO_DESIRED_LENGTH","RADIO_DESIRED_ROWS","SleevesInfo","selectedDesiredValue","setSelectDesiredValue","rows","sts","setFbEqualSts","setFbEqualRows","fbEqualSts","fbEqualRows","desiredRaglanLength","desiredRaglanRows","setDesiredRaglanRows","setDesiredRaglanLength","sleeve","setSleeveSts","fbInfos","printDrection","headers","fbEqual","fbHeader","sleeves","moreInfos","disabled","React","createContext","displayName","AppProvider","sleeveSts","setFrontStartSt","contextValue","Provider","MyLink","brandStyles","styles","makeStyles","Link","className","rel","href","icon","Copyright","flexGrow","Date","getFullYear","faYoutube","faInstagram","faRavelry","faEtsy","Header","pb","AppBar","elevation","borderBottom","t","palette","divider","Toolbar","noWrap","Footer","pt","top","bottom","borderTop","AppMain","Container","component","maxWidth","mb","CssBaseline","theme","createTheme","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db8b7631.chunk.js","sourcesContent":["import React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport { InputAdornment } from '@mui/material';\n\nconst TableForm = (props) => {\n    const { label = \"none\", txtInfo=[] } = props;\n    let feildLen = txtInfo.length;\n    const colSize = feildLen > 1 ? (8 / feildLen) : 8;\n    let labelColSize = txtInfo ? 3 : 12;\n    \n    return (\n        <React.Fragment>\n            <Grid container \n                 spacing={1} padding={0} \n                 flexdirection=\"row\" justify=\"center\" justifyContent=\"center\" \n                 alignItems=\"ceneter\" spacing={2}>\n                \n                <Grid item xs={labelColSize} sm={labelColSize} lg={labelColSize}>\n                    <Typography color=\"primary\" align=\"center\" \n                        sx={{ mt: 2.3, fontSize: \"1em\", fontWeight: 500}} >\n                        {label}\n                    </Typography>\n                </Grid>\n\n                {txtInfo.map((info, idx) => {\n                    let variant = info.variant ? info.variant : \"standard\";\n                    let { id, txtLabel, onChange, type, value, sx, ...others } = info;\n                    return  (\n                    <Grid item key={idx} xs={colSize} sm={colSize}>\n                        <TextField\n                            // required={info.required}\n                            id={id}\n                            name={id}\n                            label={txtLabel}\n                            fullWidth\n                            autoComplete=\"no info\"\n                            variant={variant}\n                            onChange={onChange}\n                            type={type}\n                            value={value}\n                            sx={sx}\n                            {...others}\n                            inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\n                            InputProps = {{ endAdornment: <InputAdornment position=\"end\">{info.endAdornment}</InputAdornment> } }\n                        />\n                    </Grid>\n                    )}\n                    \n                )}\n            </Grid>\n        </React.Fragment>\n        );\n    }\n\nexport default TableForm;","import React from 'react';\nimport Paper from '@mui/material/Paper';\n\n\n\nconst InfoTableContainer = (props) => (\n    <React.Fragment>\n         <Paper variant=\"outlined\" sx={{ my: { xs: 2, md: 3 }, p: 1 }}>\n            {props.children}\n        </Paper>\n    </React.Fragment>\n);\n\n\nexport default InfoTableContainer;","import React from 'react';\nimport TableForm from '../Components/TableForm';\nimport InfoTableContainer from './InfoTableContainer';\n\n\n\nconst BasicInfo = (props) => {\n\n    const basicInfo = [\n        {\n            label: \"실 정보\",\n            txtInfo: [{\n                id: \"yarnInfo\",\n                txtLabel: \"실 정보를 입력하세요\",\n                required: false,\n            }],\n        },\n        {\n            label: \"바늘 사이즈\",\n            txtInfo: [{\n                id: \"needleSize\",\n                txtLabel: \"바늘 사이즈를 입력하세요\",\n                required: false,\n                },\n            ],\n        },\n    ];\n    \n    return (\n    <React.Fragment>\n         <InfoTableContainer>\n            <TableForm label={basicInfo[0].label} txtInfo={basicInfo[0].txtInfo} />\n            <TableForm label={basicInfo[1].label} txtInfo={basicInfo[1].txtInfo} />\n        </InfoTableContainer>\n    </React.Fragment>\n    );\n}\n\n\nexport default BasicInfo;","import React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\n\n\n\n\n// function Item(props) {\n//     const { label, value, sx, ...other } = props;\n    \n//     return (\n//         <div style={{ width: '100%' }}>\n//         <Box\n//             sx={{\n//             display: 'grid',\n//             columnGap: 1,\n//             rowGap: 1,\n//             gridTemplateColumns: 'repeat(1, 1fr)',\n//             }}\n//         >\n//             <Box\n//                 sx={{\n//                 bgcolor: 'primary.main',\n//                 color: 'white',\n//                 p: 1,\n//                 borderRadius: 1,\n//                 textAlign: 'center',\n//                 fontSize: '1em',\n//                 fontWeight: '700',\n//                 ...sx,\n//                 }}\n//                 {...other}\n//             >\n//                 {label}\n//             </Box>\n\n//             <Box\n//                 sx={{\n//                     p: 1,\n//                     borderRadius: 1,\n//                     textAlign: 'center',\n//                     fontSize: '1em',\n//                     fontWeight: '700',\n//                     ...sx,\n//                     }}\n//                     {...other}\n//             >\n//                 {value}\n//             </Box>\n\n//         </Box>\n//         </div>\n//     );\n//   }\n  \n//   Item.propTypes = {\n//     sx: PropTypes.object,\n//   };\n\n\n// const TitleRow = (props) => {\n//     const titles = props.titles;\n//     const colSize = Math.round(12 / titles.length);\n//     let fontSize = \"1em\";\n\n//     console.log(\"titles.length:::: \", titles.length);\n\n//     return (\n//         <React.Fragment>\n\n//             <div style={{ width: '100%' }}>\n//             <Box\n//                 sx={{\n//                 display: 'grid',\n//                 columnGap: 1,\n//                 rowGap: 1,\n//                 gridTemplateColumns: 'repeat(9, 1fr)',\n//                 }}\n//             >\n//                 {\n//                     titles.map((title, idx) => (\n//                         <Item key={idx} label={title.label} value={title.value} />\n//                     ))\n//                 }\n//             </Box>\n//             </div>\n\n//             {/* <div style={{ width: '70%' }}>\n//             <Box\n//                 sx={{\n//                 display: 'grid',\n//                 columnGap: 1,\n//                 rowGap: 1,\n//                 gridTemplateColumns: 'repeat(1, 1fr)',\n//                 }}\n//             >\n\n//                 {\n//                     titles.map((title, idx) => (\n//                         <Item key={idx} >\n//                                 {title}\n//                         </Item>\n//                     ))\n//                 }\n//             </Box>\n//             </div> */}\n\n\n// {/* \n//             <Grid container flexdirection=\"column\" justify=\"center\" justifyContent=\"center\" alignItems=\"ceneter\" spacing={2}>\n//             {\n//                 titles.map((title, idx) => (\n//                     <Grid item key={idx} xs={colSize} >\n//                         <Typography color=\"primary\" align=\"center\" variant=\"h6\" \n//                             sx={{ mt: 2.3, fontSize: {fontSize}, fontWeight: 500}} >\n//                             {title}\n//                         </Typography>\n//                     </Grid>\n//                 ))\n//             }\n//             </Grid> */}\n//         </React.Fragment>\n//     );\n// }\n\n\n\n/*\nstartStInfo = {label, value}\n*/\n\n\n// function Item(props) {\n//     const { sx, ...other } = props;\n//     return (\n//       <Box\n//         sx={{\n//           bgcolor: 'primary.main',\n//           color: 'white',\n//           p: 1,\n//           borderRadius: 1,\n//           textAlign: 'center',\n//           fontSize: '1em',\n//           fontWeight: '700',\n//           ...sx,\n//         }}\n//         {...other}\n//       />\n//     );\n//   }\n  \n//   Item.propTypes = {\n//     sx: PropTypes.object,\n//   };\n\n\n// const TitleRow = (props) => {\n//     const titles = props.titles;\n//     const colSize = Math.round(12 / titles.length);\n//     let fontSize = \"1em\";\n\n//     console.log(\"titles.length:::: \", titles.length);\n\n//     return (\n//         <React.Fragment>\n//             <div style={{ width: '70%' }}>\n//             <Box\n//                 sx={{\n//                 display: 'grid',\n//                 columnGap: 1,\n//                 rowGap: 1,\n//                 gridTemplateColumns: 'repeat(1, 1fr)',\n//                 }}\n//             >\n\n//                 {\n//                     titles.map((title, idx) => (\n//                         <Item key={idx} >\n//                                 {title}\n//                         </Item>\n//                     ))\n//                 }\n//             </Box>\n//             </div>\n\n\n// {/* \n//             <Grid container flexdirection=\"column\" justify=\"center\" justifyContent=\"center\" alignItems=\"ceneter\" spacing={2}>\n//             {\n//                 titles.map((title, idx) => (\n//                     <Grid item key={idx} xs={colSize} >\n//                         <Typography color=\"primary\" align=\"center\" variant=\"h6\" \n//                             sx={{ mt: 2.3, fontSize: {fontSize}, fontWeight: 500}} >\n//                             {title}\n//                         </Typography>\n//                     </Grid>\n//                 ))\n//             }\n//             </Grid> */}\n//         </React.Fragment>\n//     );\n// }\n\n\nconst TitleRow = (props) => {\n    const titles = props.titles;\n    const colSize = Math.round(12 / titles.length);\n    let fontSize = \"1em\";\n\n    return (\n        <React.Fragment>\n            <Grid container flexdirection=\"column\" justify=\"center\" justifyContent=\"center\" alignItems=\"ceneter\" spacing={2}>\n            {\n                titles.map((title, idx) => (\n                    <Grid item key={idx} xs={colSize} >\n                        <Typography color=\"primary\" align=\"center\" variant=\"h6\" \n                            sx={{ m: 2, fontSize: {fontSize}, fontWeight: 500}} >\n                            {title}\n                        </Typography>\n                    </Grid>\n                ))\n            }\n            </Grid>\n        </React.Fragment>\n    );\n}\n\nexport default TitleRow;","import React from 'react';\nimport { Box } from '@mui/system';\nimport PropTypes from 'prop-types';\n\n\nconst BasicTable = (props) => {\n    const { printDirection=\"row\", items, bg, sx, ...others } = props;\n\n    // 테이블 출력 방향 row 이면 가로로, col 이면 세로로 출력\n    // repeat() 의 첫 번째 인자가 1이면 행단 1컬럼만 출력 하므로 세로 출력이 된다.\n    let repeat = items.length;\n    if(printDirection === \"column\")  repeat = 1;\n    const gridTemplateColumns = `repeat(${repeat}, 1fr)`;\n\n\n    let colors = {\n        bgcolor: 'primary.light',\n        color: 'white',\n    }\n\n    if(!bg) colors = null;\n\n    return (\n        <div style={{ width: '100%' }}>\n        <Box\n            sx={{\n                display: 'grid',\n                columnGap: 1,\n                rowGap: 1,\n                gridTemplateColumns: {gridTemplateColumns},\n                ...sx,\n            }}\n            {...others}\n        >\n\n        {\n            items.map((item, idx)=>{\n                return (\n                    <Box key={idx}\n                        sx={{\n                            ...colors,\n                            p: 1,\n                            borderRadius: 1,\n                            textAlign: 'center',\n                            fontSize: '1em',\n                            fontWeight: '700',\n                            ...others,\n                        }}\n                    >\n                        {item}\n                    </Box>\n            \n                );\n        })\n        }\n\n        </Box>\n        </div>\n    );\n}\n\nBasicTable.propTypes = {\n    sx: PropTypes.object,\n};\n\nexport default BasicTable;","import React, { useContext, useEffect, useState } from 'react';\nimport TableForm from '../Components/TableForm';\nimport InfoTableContainer from './InfoTableContainer';\nimport { appContext } from './AppMain';\nimport TitleRow from './TitleRow';\nimport BasicTable from '../Components/BasicTable';\n// import { COLOR_PRIMARY_LIGHT, COLOR_WHITE, DIVIDE_SLEEVE_COUNT } from '../utils/constants';\n\n\nconst SwatchTable = (props) => {\n    let context = useContext(appContext);\n\n    const [contractionSts, setContractionSts] = useState(0);\n    const [contractionRows, setContractionRows] = useState(0);\n\n    useEffect(() => {\n        let beforeSts = context.beforeSts;\n        let afterSts = context.afterSts;\n        // 수축률 = 세탁 전 / 세탁 후 * 100\n        if (beforeSts > 0 && afterSts > 0) {\n            let res = (beforeSts / afterSts) * 100;\n            setContractionSts(res.toFixed(2));\n        }\n    }, [context.beforeSts, context.afterSts]);\n\n    useEffect(() => {\n        let beforeRows = context.beforeRows;\n        let afterRows = context.afterRows;\n        // 수축률 = 세탁 전 / 세탁 후 * 100\n        if(beforeRows > 0 && afterRows > 0) {\n            let res = (beforeRows / afterRows) * 100;\n            setContractionRows(res.toFixed(2));\n        }\n\n    }, [context.beforeRows, context.afterRows]);\n\n    const handleChangeBeforeStitches = e => {\n        context.setBeforeSts(e.target.value);\n    };\n\n    const handleChangeBeforeRows = e => {\n        context.setBeforeRows(e.target.value);\n    };\n    const handleChangeAfterStitches = e => {\n        context.setAfterSts(e.target.value);\n        context.setAfterSts(e.target.value);\n    };\n\n    const handleChangeAfterRows = e => {\n        context.setAfterRows(e.target.value);\n    };\n\n    const swatchInfo = [\n        {\n            label: \"세탁 전\",\n            txtInfo: [\n                {\n                    id: \"beforeSts\",\n                    txtLabel: \"(숫자만)\",\n                    type: \"number\",\n                    onChange: handleChangeBeforeStitches,\n                    endAdornment: \"코\",\n                },\n                {\n                    id: \"beforeRows\",\n                    txtLabel: \"(숫자만)\",\n                    type: \"number\",\n                    onChange: handleChangeBeforeRows,\n                    endAdornment: \"단\",\n                }\n            ],\n        },\n        \n        {\n            label: \"세탁 후\",\n            txtInfo: [\n                {\n                    id: \"afterSts\",\n                    txtLabel: \"(숫자만)\",\n                    type: \"number\",\n                    required: true,\n                    onChange: handleChangeAfterStitches,\n                    endAdornment: \"코\",\n                },\n                {\n                    id: \"afterRows\",\n                    txtLabel: \"(숫자만)\",\n                    type: \"number\",\n                    required: true,\n                    onChange: handleChangeAfterRows,\n                    endAdornment: \"단\",\n                }\n            ],\n        },\n    ];\n\n\n    // const results = [\n    //     {\n    //         label: \"수축률\",\n    //         results: [\n    //             {\n    //                 id: \"resSts\",\n    //                 txtLabel: `${contractionSts} %`,\n    //                 onChange: null,\n    //                 variant: \"filled\",\n    //             },\n    //             {\n    //                 id: \"resRows\",\n    //                 txtLabel: `${contractionRows} %`,\n    //                 onChange: null,\n    //                 variant: \"filled\",\n    //             }\n    //         ],\n    //     },\n    // ];\n\n    const results = [\n        {\n            printDirection: \"row\",\n            sx: {\n                bgcolor: \"#f5f5f5\",\n            },\n            data: [\"수축율\", `${contractionSts} %`, `${contractionRows} %`],\n        },\n    ];\n\n    const rowTitles = [\"Swatch\", \"코 수\", \" 단 수\"];\n\n    return (\n        <React.Fragment>\n             <InfoTableContainer>\n                 <TitleRow titles={rowTitles} />\n\n                {\n                    swatchInfo.map((info, idx) => (\n                        <TableForm key={idx} label={info.label} txtInfo={info.txtInfo} />\n                    ))\n                }\n                {\n                    results.map((res, idx) => (\n                        <BasicTable key={idx} items={res.data}\n                            printDirection={ res.printDirection} sx={{...res.sx}} />\n\n                    ))\n                }\n                \n                 \n                {/* <ResultForm label={results[0].label} results={results[0].results} /> */}\n            </InfoTableContainer>\n        </React.Fragment>\n        );\n}\n\n\nexport default SwatchTable;","export const SITE_NAME = \"Fleur Sarang Crochet\";\nexport const BRAND_YOUTUBE = \"YOUTUBE\";\nexport const BRAND_INSTAGRAM = \"INSTAGRAM\";\nexport const BRAND_RAVELRY = \"RAVELLRY\";\nexport const BRAND_ETSY = \"ETSY\";\nexport const DIVIDE_SLEEVE_COUNT = 7;\n\nexport const COLOR_PRIMARY_MAIN = \"#f06292\";\nexport const COLOR_PRIMARY_DARK = \"#a84466\";\nexport const COLOR_PRIMARY_LIGHT = \"#f381a7\";\nexport const COLOR_WHITE = \"white\";\n\nexport const RADIO_SEX_FEMAILE = \"female\";\nexport const RADIO_SEX_MAILE = \"maile\";","import { FormControlLabel, Radio, RadioGroup, Typography } from '@mui/material';\nimport React, { useContext } from 'react';\nimport BasicTable from '../Components/BasicTable';\nimport { RADIO_SEX_FEMAILE, RADIO_SEX_MAILE } from '../utils/constants';\nimport { appContext } from './AppMain';\nimport InfoTableContainer from './InfoTableContainer';\n\n\nconst SexInfo = (props) => {\n    const context = useContext(appContext);\n\n    const sexInfo = [\n        \"성별\",\n        <FormControlLabel value={RADIO_SEX_FEMAILE} control={<Radio size=\"small\" />} label=\"여\" />,\n        <FormControlLabel value={RADIO_SEX_MAILE} control={<Radio size=\"small\" />} label=\"남\" />,\n    ];\n    \n\n    const handleRadioChange = e => {\n        context.setSelectedSex(e.target.value);\n    }\n\n    return (\n    <React.Fragment>\n         <InfoTableContainer>\n        <RadioGroup row\n            aria-label=\"sexInfo\"\n            name=\"sexInfo\"\n            value={context.selectedSex}\n            onChange={handleRadioChange}\n        >\n            <BasicTable items={sexInfo} placeSelf={\"center\"} />\n        </RadioGroup>\n        </InfoTableContainer>\n    </React.Fragment>\n    );\n}\n\n\nexport default SexInfo;","import React, { useContext, useEffect, useState } from 'react';\nimport TableForm from '../Components/TableForm';\nimport InfoTableContainer from './InfoTableContainer';\nimport { appContext } from './AppMain';\nimport { COLOR_PRIMARY_LIGHT, COLOR_WHITE, DIVIDE_SLEEVE_COUNT } from '../utils/constants';\nimport BasicTable from '../Components/BasicTable';\n\nconst SizeInfo = (props) => {\n    const [divSleeves, setdivSleeves] = useState(0); // 소매 나눔 수\n    let context = useContext(appContext);\n\n    useEffect(() => {\n        let afterSts = context.afterSts;\n        let neckBack = context.neckBack;\n        // 총 콧수 = (세탁후 코수 / 10) * 뒷목 둘레\n        if(neckBack > 0){\n            let totalSts = Math.round((afterSts / 10) * neckBack);\n            context.setTotalSts(totalSts);\n            context.setTotalSts(totalSts);\n        }\n            \n    }, [context.neckBack, context]);\n\n    useEffect(() => {\n        let totalSts = context.totalSts;\n        let raglanSts = context.raglanSts;\n        if(totalSts > 0){\n            let divide = divSleeves ? divSleeves : DIVIDE_SLEEVE_COUNT;\n            // 소매 콧수 = (총 콧수 / DIVIDE_SLEEVE_COUNT) - (raglanSts / 2)\n            // 반올림\n            context.setSleeveStartSts(Math.round((totalSts / divide)) - Math.round(raglanSts / 2));\n        }\n\n    }, [context.totalSts, divSleeves, context.raglanSts, context]);\n\n    useEffect(() => {\n        let totalSts = context.totalSts;\n        let sleeveStartSts = context.sleeveStartSts;\n        let raglanSts = context.raglanSts;\n        let frontStartSt = context.frontStartSt;\n        if(totalSts > 0 && raglanSts > 0 && sleeveStartSts > 0) {\n            // 뒷판 코수 = 총 코수 - (소매 코수 * 2) - 2(양쪽 앞섶?) - (raglanSts * 4)\n            let back = totalSts - (sleeveStartSts * 2) - (raglanSts * 4) - (frontStartSt * 2);\n            context.setBackStartSts(back);\n        }\n    }, [context.totalSts, context.setSleeveStartSts, context.raglanSts, context]);\n\n\n    const handleChangeNeckBack = e => {\n        context.setNeckBack(e.target.value);\n        context.setNeckBack(e.target.value);\n    }\n\n    const handleChangeRaglanSt = e => {\n        context.setRaglanSts(e.target.value);\n    }\n\n    const handleChangeSleeves = e => {\n        setdivSleeves(e.target.value);\n    }\n\n    const sizeInfo = [\n        {\n            label: \"뒷목 둘레\",\n            txtInfo: [\n                {\n                    id: \"neckBack\",\n                    txtLabel: \"뒷목 둘레를 입력하세요\",\n                    type: \"number\",\n                    required: true,\n                    onChange: handleChangeNeckBack,\n                    endAdornment: \"cm\",\n                }\n            ],\n        },\n        \n        {\n            label: \"래글런코\",\n            txtInfo: [\n                {\n                    id: \"raglanSt\",\n                    txtLabel: \"래글런코를 입력하세요\",\n                    type: \"number\",\n                    onChange: handleChangeRaglanSt,\n                    endAdornment: \"코\",\n                },\n            ],\n        },\n        {\n            label: \"소매 나눔 수\",\n            txtInfo: [\n                {\n                    id: \"sleeves\",\n                    txtLabel: \"소매 나눔 수를 입력하세요\",\n                    type: \"number\",\n                    onChange: handleChangeSleeves,\n                    \n                },\n            ],\n        },\n    ];\n\n    const results = [\n        {\n            printDirection: \"row\",\n            data: [\"총 콧수\", \"소매 콧수\", \"뒷판 콧수\",],\n        },\n        {\n            printDirection:\"row\",\n            sx: {\n                bgcolor: COLOR_PRIMARY_LIGHT,\n                color: COLOR_WHITE,\n            },\n            data:[context.totalSts, context.sleeveStartSts, context.backStartSts],\n        }\n    ]\n    \n    return (\n        <React.Fragment>\n             <InfoTableContainer>\n                 {\n                     sizeInfo.map((info, idx) => (\n                        <TableForm key={idx} label={info.label} txtInfo={info.txtInfo} />\n                     ))\n                 }\n            </InfoTableContainer>\n\n            <InfoTableContainer>\n                {/* <Box\n                    sx={{\n                        display: 'flex',\n                        flexdirection: \"column\",\n                        justify: \"center\",\n                        justifyContent: \"center\",\n                        alignItems: \"ceneter\",\n                    }}\n                > */}\n\n                {\n                    // Print total stitches\n                    results.map((res, idx) => (\n                        // <ResultForm key={idx} label={res.label} results={res.results} />\n                        <BasicTable key={idx} items={res.data}  \n                            printDirection={res.printDirection} \n                            sx={{\n                                // border: 0.2,\n                                ...res.sx,\n                            }}\n                        /> \n                    ))\n                }\n\n                {/* </Box> */}\n            </InfoTableContainer>\n        </React.Fragment>\n        );\n}\n\n\nexport default SizeInfo;","import Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport { styled } from '@mui/material/styles';\n\nimport { BRAND_YOUTUBE, BRAND_INSTAGRAM, BRAND_RAVELRY, BRAND_ETSY } from '../utils/constants';\n\n// Create a Title component that'll render an <h1> tag with some styles\nexport const Title = styled(Typography)(\n  ({ color, size, align }) => `\n    font-size: ${ size ? size : \"1.5em\" };\n    text-align: ${ align ? align : \"center\" };\n    color: ${ color ? color : \"palevioletred\" };\n  `\n);\n\n\n// Create a Wrapper component that'll render a <section> tag with some styles\nexport const Wrapper = styled(Box)(\n  ({ bgcolor, padding }) => `\n  padding: ${padding? padding : \"4em\"};\n  background: ${bgcolor ? bgcolor: \"papayawhip\"};\n`,\n);\n\n\nconst linkStyle = {\n  fontSize: '1.5em',\n  padding: 5,\n};\n\nconst getBrandColor = brand => {\n  if (brand === BRAND_YOUTUBE) return \"#E62117\";\n  else if(brand === BRAND_INSTAGRAM) return \"#8a49a1\";\n  else if(brand === BRAND_RAVELRY) return \"#eb6357\";\n  else if(brand === BRAND_ETSY) return \"#eb6d20\";\n}\n\nexport const generateBrandStyles = (brand) => {\n  let brandColor = getBrandColor(brand);\n    return (\n        {\n          link: {\n          ...linkStyle,\n          '&:hover': {\n              fontSize: '2em',\n              color: brandColor,\n          },\n        }\n      }\n    );\n}","import React, { useContext } from 'react';\nimport InfoTableContainer from './InfoTableContainer';\nimport { appContext } from './AppMain';\nimport TitleRow from './TitleRow';\nimport BasicTable from '../Components/BasicTable';\nimport { COLOR_PRIMARY_LIGHT, COLOR_WHITE } from '../utils/constants';\n\n\nconst StartStitches = (props) => {\n    let context = useContext(appContext);\n    let raglanSts = context.raglanSts;\n    let sleeveStartSts = context.sleeveStartSts;\n    let backStartSts = context.backStartSts;\n    let frontStartSt = context.frontStartSt;\n    \n    const rowHeader = [\"시작 코 수\"];\n    // const rowTitles = {\n    //     bg: 0,\n    //     data: [\"앞섶\", \"래글런\", \"소매\", \"래글런\", \"뒷판\", \"래글런\", \"소매\", \"래글런\", \"앞섶\"],\n    // };\n    // const startInfoLable = {\n    //     bg: 1,\n    //     data: [frontStartSt, raglanSts, sleeveStartSts, raglanSts, backStartSts, raglanSts, sleeveStartSts, raglanSts, frontStartSt]\n    // };\n\n\n    // const startInfo1 = [\n    //     {\n    //         label: \"앞섶\",\n    //         value: frontStartSt,\n    //     },\n    //     {\n    //         label: \"레글런\",\n    //         value: raglanSts,\n    //     },\n    //     {\n    //         label: \"소매\",\n    //         value: sleeveStartSts,\n    //     },\n    //     {\n    //         label: \"래글런\",\n    //         value: raglanSts,\n    //     },\n    //     {\n    //         label: \"뒷판\",\n    //         value: backStartSts,\n    //     },\n    //     {\n    //         label: \"래글런\",\n    //         value: raglanSts,\n    //     },\n    //     {\n    //         label: \"소매\",\n    //         value: sleeveStartSts,\n    //     },\n    //     {\n    //         label: \"래글런\",\n    //         value: raglanSts,\n    //     },\n    //     {\n    //         label: \"앞섶\",\n    //         value: frontStartSt,\n    //     }\n    // ];\n\n    // const parseArray = (arr) => {\n    //     for (const key in arr) {\n\n    //         if (arr.hasOwnProperty(key)) {\n\n                \n    //             console.log(`^^^^^^^${key}: ${arr[key]}`);\n    //         }\n    //     }\n    // }\n\n\n    const startInfos = [\n        {\n            bg: 0,\n            printDirection: \"row\",\n            data: [\"앞섶\", \"래글런\", \"소매\", \"래글런\", \"뒷판\", \"래글런\", \"소매\", \"래글런\", \"앞섶\"],\n        },\n        {\n            printDirection: \"row\",\n            sx: {\n                bgcolor: COLOR_PRIMARY_LIGHT,\n                color: COLOR_WHITE,\n            },\n            data: [frontStartSt, raglanSts, sleeveStartSts, raglanSts, backStartSts, raglanSts, sleeveStartSts, raglanSts, frontStartSt]\n        }\n    ];\n\n\n    return (\n        <React.Fragment>\n             <InfoTableContainer>\n                 <TitleRow titles={rowHeader} />\n                 {/* {\n                     parseInfo.map((info, idx) => {\n                        return (<BasicTable items={info} printDirection=\"row\" bg />);\n                     })\n                 } */}\n\n                 {\n                     startInfos.map((info, idx) => {\n                         return (<BasicTable key={idx} items={info.data} bg={info.bg} sx={info.sx} />)\n\n                     })\n                 }\n\n\n\n\n{/* \n                 <BasicTable items={rowTitles} printDirection=\"row\" />\n                 <BasicTable items={startInfoLable} bg /> */}\n            </InfoTableContainer>\n        </React.Fragment>\n        );\n}\n\nexport default StartStitches;","import React, { useContext, useEffect, useState } from 'react';\nimport InfoTableContainer from './InfoTableContainer';\nimport { appContext } from './AppMain';\nimport TitleRow from './TitleRow';\nimport BasicTable from '../Components/BasicTable';\nimport { COLOR_PRIMARY_LIGHT, COLOR_WHITE } from '../utils/constants';\nimport TableForm from '../Components/TableForm';\nimport { FormControlLabel, Radio, RadioGroup } from '@mui/material';\n\n\nconst RADIO_DESIRED_LENGTH = \"length\";\nconst RADIO_DESIRED_ROWS = \"rows\";\n\nconst SleevesInfo = (props) => {\n    let context = useContext(appContext);\n    const [selectedDesiredValue, setSelectDesiredValue] = useState(RADIO_DESIRED_LENGTH);\n    \n      //calculate FB Equal rows & sts\n      useEffect(() => {\n        let backStartSts = context.backStartSts;\n        let frontStartSt = context.frontStartSt;\n\n        if(backStartSts > 0 && frontStartSt > 0) {            \n            // 앞단 식: 코 수(y) = 2x(단) + (frontStartSt * 2)(앞섶 시작 코수 양쪽 1씩)\n            // 뒷판 식: 코 수(y) = x(단) + backStartSts(뒷판 시작 코 수)\n            // ==> 뒤판이 앞판 양쪽 합과 같은 코수가 되는 식: \n            // 2x + (frontStartSt * 2) = x + backStartSts => \n            //  x(fbEqualRows) = backStartSts - (frontStartSt * 2)\n            //  y(fbEqualSts) = x(fbEqualRows) + backStartSts\n            let rows = backStartSts - (frontStartSt * 2);\n            let sts = rows + backStartSts;\n            context.setFbEqualSts(sts);\n            context.setFbEqualRows(rows);\n        }\n\n    }, [context.backStartSts, context.frontStartSt, context.fbEqualSts, context]);\n\n    // 앞뒤판 코 같아진 후에 더 뜰 래글런 길이, 그 수에 소매 코수\n    useEffect(() => {\n        let afterRows = context.afterRows;\n        let sleeveStartSts = context.sleeveStartSts;\n        let fbEqualRows = context.fbEqualRows;\n        let desiredRaglanLength = context.desiredRaglanLength;\n        let desiredRaglanRows = context.desiredRaglanRows;\n\n        if(selectedDesiredValue === RADIO_DESIRED_LENGTH) {\n            if(desiredRaglanLength > 0 && afterRows > 0) {\n                // 원하는 총 래글런 길이에서 이미 뜬만큼의 길이를 빼고 나머지 떠야할 단을 계산\n                let rows = Math.round(desiredRaglanLength * (afterRows / 10)) - fbEqualRows; \n                context.setDesiredRaglanRows(rows);\n            }\n        } else if(selectedDesiredValue === RADIO_DESIRED_ROWS) {\n            if(desiredRaglanRows > 0 && afterRows > 0) {\n                let length = Math.round((desiredRaglanRows + fbEqualRows) / (afterRows / 10));\n                context.setDesiredRaglanLength(length);\n            }\n        }\n\n        let sleeve = sleeveStartSts;\n        if (desiredRaglanRows > 0) {\n            // 소매 코수(한 쪽): sleeveStartSts += ((fbEqualRows + context.desiredRaglanLength) * 2) 양쪽에서 늘리므로 단마다 2코씩 증가 + raglan 2\n            sleeve = ((fbEqualRows + desiredRaglanRows) * 2) + context.raglanSts;\n            context.setSleeveSts(sleeve);\n        }\n\n    }, [selectedDesiredValue, context, context.fbEqualRows, context.sleeveStartSts, context.afterRows, context.desiredRaglanLength, context.desiredRaglanRows]);\n\n\n    const handleDesiredRaglanLength = e => {\n        context.setDesiredRaglanLength(e.target.value);\n    };\n\n    const handleChangeDesiredRaglanRows = e => {\n        context.setDesiredRaglanRows(e.target.value);\n    };\n\n    const handleRadioChange = e => {\n        setSelectDesiredValue(e.target.value);\n    }\n\n\n    const fbInfos = [\n        {\n            printDrection: \"row\",\n            data: [\"앞 뒤 콧수가 같아지는 단\", \"같아지는 콧수\"],\n        },\n        {\n            printDirection: \"row\",\n            sx: {\n                bgcolor: COLOR_PRIMARY_LIGHT,\n                color: COLOR_WHITE,\n            },\n            data: [`+${context.fbEqualRows}단`, context.fbEqualSts],\n        },\n    ];\n\n    // const fbEqualHeader = [\"뒷판의 콧수와 앞판 두 개를 더한 콧수가 같을 때까지 뜨기(겉뜨기 단에서만 코 늘림)\"];\n    // const fbHeader = [\"첫 코와 마지막 코 늘림 없이 래글린 앞뒤만 늘리며 계속 뜨기\"];\n    const headers = {\n        fbEqual: [\"뒷판의 콧수와 앞판 두 개를 더한 콧수가 같을 때까지 뜨기(겉뜨기 단에서만 코 늘림)\"],\n        fbHeader: [\"첫 코와 마지막 코 늘림 없이 래글린 앞뒤만 늘리며 계속 뜨기\"],\n        sleeves: [\"소매 정보\"],\n    };\n\n    const moreInfos = [\n        {\n            label: <FormControlLabel value={RADIO_DESIRED_LENGTH} \n                control={<Radio\n                    sx={{'& .MuiSvgIcon-root': {\n                        fontSize:17,\n                    },}}\n                 />} \n                 label=\"총 래글런 길이\" />,\n            txtInfo: [\n                {\n                    id: \"desireRaglanLegnth\",\n                    value: context.desiredRaglanLength,\n                    txtLabel: \"원하는 길이를 입력하면 단 수가 아래에 계산됩니다.\",\n                    type: \"number\",\n                    required: false,\n                    onChange: handleDesiredRaglanLength,\n                    endAdornment: \"cm\",\n                    disabled: (selectedDesiredValue === RADIO_DESIRED_LENGTH) ? false : true,\n                }\n            ],\n        },\n        \n        {\n            label: <FormControlLabel value={RADIO_DESIRED_ROWS} \n                control={<Radio\n                    sx={{'& .MuiSvgIcon-root': {\n                        fontSize:17,\n                    },}}\n                />}  \n                label=\"떠야하는 단 수\" />,\n            txtInfo: [\n                {\n                    id: \"desiredRaglanRows\",\n                    value: context.desiredRaglanRows,\n                    txtLabel: \"원하는 단 수를 직접 입력해도 됩니다.\",\n                    type: \"number\",\n                    required: false,\n                    onChange: handleChangeDesiredRaglanRows,\n                    endAdornment: \"단\",\n                    disabled: (selectedDesiredValue === RADIO_DESIRED_ROWS) ? false : true,\n                }\n            ],\n        },\n    ];\n  \n\n    return (\n        <React.Fragment>\n            {/* 앞 뒤 콧수 같아지는 단 */}\n            <InfoTableContainer>\n                <TitleRow titles={headers[\"fbEqual\"]} />\n                {\n                    fbInfos.map((info, idx) => {\n                        return (<BasicTable key={idx} items={info.data} bg={info.bg} sx={info.sx} />)\n                    })\n                }\n            </InfoTableContainer>\n\n            {/* 래글런 길이 */}\n            <InfoTableContainer>\n                <TitleRow titles={headers[\"fbHeader\"]} />\n                <RadioGroup row\n                aria-label=\"desiredRaglanValue\"\n                name=\"desiredRaglanValue\"\n                value={selectedDesiredValue}\n                onChange={handleRadioChange}\n                >\n\n                {\n                moreInfos.map((info, idx) => (\n                    <TableForm key={idx} label={info.label} txtInfo={info.txtInfo} />\n                ))\n                }\n            </RadioGroup>\n            </InfoTableContainer>\n\n            {/* 소매 정보 */}\n            {/* <InfoTableContainer>\n                <TitleRow titles={headers[\"sleeves\"]} />\n                <RadioGroup row\n                aria-label=\"desiredRaglanValue\"\n                name=\"desiredRaglanValue\"\n                value={selectedDesiredValue}\n                onChange={handleRadioChange}\n                >\n\n                {\n                moreInfos.map((info, idx) => (\n                    <TableForm key={idx} label={info.label} txtInfo={info.txtInfo} />\n                ))\n                }\n            </RadioGroup>\n            </InfoTableContainer> */}\n        </React.Fragment>\n    );\n}\n\n\nexport default SleevesInfo;","import React, { useState } from 'react';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport BasicInfo from './BasicInfo';\nimport SwatchTable from './SwatchTable';\nimport SexInfo from './SexInfo';\nimport Box from '@mui/material/Box';\nimport SizeInfo from './SizeInifo';\nimport { CssBaseline, Grid, Link } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faYoutube, faInstagram, faRavelry, faEtsy } from '@fortawesome/free-brands-svg-icons'\nimport { BRAND_YOUTUBE, BRAND_INSTAGRAM, BRAND_RAVELRY, BRAND_ETSY, COLOR_PRIMARY_MAIN, RADIO_SEX_FEMAILE } from '../utils/constants';\nimport { generateBrandStyles } from '../Styles/styles';\nimport StartStitches from './StartStitches';\nimport SleevesInfo from './SleevesInfo';\n\n\nexport const appContext = React.createContext();\nappContext.displayName = '컨텍스트!!!!!';\nconst AppProvider = (props) => {\n    // const [beforeSts, setBeforeSts] = useState(0); // 세탁 전 스와 코 수\n    // const [afterSts, setAfterSts] = useState(16); // 세탁 후 스와치 코 수\n    // const [beforeRows, setBeforeRows] = useState(0); // 세탁 전  스와치 단 수\n    // const [afterRows, setAfterRows] = useState(28);\n    // const [neckBack, setNeckBack] = useState(30); // 뒷목 둘레\n    const [beforeSts, setBeforeSts] = useState(0); // 세탁 전 스와 코 수\n    const [afterSts, setAfterSts] = useState(0); // 세탁 후 스와치 코 수\n    const [beforeRows, setBeforeRows] = useState(0); // 세탁 전  스와치 단 수\n    const [afterRows, setAfterRows] = useState(0);\n    const [neckBack, setNeckBack] = useState(0); // 뒷목 둘레\n\n    const [totalSts, setTotalSts] = useState(0); // 총 코수\n    const [sleeveStartSts, setSleeveStartSts] = useState(0); // 소매 시작 코수\n    const [sleeveSts, setSleeveSts] = useState(0) // 총 소매 코수\n    const [backStartSts, setBackStartSts] = useState(0); // 뒷판 코수\n    const [raglanSts, setRaglanSts] = useState(2); // raglan\n    const [frontStartSt, setFrontStartSt] = useState(1); // 앞섶 시작 코 수\n    const [fbEqualRows, setFbEqualRows] = useState(0); // 뒷판과 앞판(양쪽 합)의 코 수가 같아지는 단 수\n    const [fbEqualSts, setFbEqualSts] = useState(0); // 뒷판 앞판 같아지는 코수\n\n    const [desiredRaglanLength, setDesiredRaglanLength] = useState(0);\n    const [desiredRaglanRows, setDesiredRaglanRows] = useState(0);\n\n    const [selectedSex, setSelectedSex] = useState(RADIO_SEX_FEMAILE);\n    \n\n    const contextValue = {afterSts, setAfterSts, neckBack, setNeckBack, totalSts, setTotalSts,\n        sleeveStartSts, setSleeveStartSts, backStartSts, setBackStartSts, raglanSts, setRaglanSts,\n        beforeSts, setBeforeSts, beforeRows, setBeforeRows, afterRows, setAfterRows,\n        frontStartSt, setFrontStartSt, fbEqualRows, setFbEqualRows, fbEqualSts, setFbEqualSts,\n        sleeveSts, setSleeveSts, desiredRaglanLength, setDesiredRaglanLength, desiredRaglanRows, setDesiredRaglanRows,\n        selectedSex, setSelectedSex,\n    };\n    return (\n        <appContext.Provider value={contextValue}>\n            {props.children}\n        </appContext.Provider>\n    );\n}\n\n\nconst MyLink = (props) => {\n    let brandStyles = generateBrandStyles(props.brand);\n    let styles = makeStyles(brandStyles)();\n\n    return (\n    <React.Fragment>\n        <Link className={styles.link} sx={{ color:'inherit' }}\n            target=\"_blank\" rel=\"noopener\" \n            href={props.href}\n        >\n            <FontAwesomeIcon icon={props.icon} />\n        </Link>{' '}\n    </React.Fragment>\n    );\n}\n\nconst Copyright = () => {\n    return (\n    <React.Fragment>\n    <Grid container flexdirection=\"column\" justify=\"center\" justifyContent=\"center\" spacing={1} alignItems=\"center\"\n        sx={{ flexGrow: 1 }}\n    >\n        <Grid item sm={12}>\n            <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n                {'Copyright © Fleur Sarang Crochet'}{' '}\n                {new Date().getFullYear()}\n                {'.'}\n            </Typography>\n        </Grid>\n\n        <Grid item sm={12}>\n            <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\"\n                sx={{}}\n            >\n                <MyLink href=\"https://www.youtube.com/c/FleurSarangCrochet\" icon={faYoutube} brand={BRAND_YOUTUBE} />\n                <MyLink href=\"https://www.instagram.com/fleursarang\" icon={faInstagram} brand={BRAND_INSTAGRAM} />\n                <MyLink href=\"https://www.ravelry.com/patterns/sources/fleurs-sarangs-ravelry-store\" icon={faRavelry} brand={BRAND_RAVELRY} />\n                <MyLink href=\"https://www.etsy.com/shop/FleurSarang\" icon={faEtsy} brand={BRAND_ETSY} />\n            </Typography>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n    );\n  }\n\nconst Header = () => (\n    <React.Fragment>\n    <Box sx={{ display: 'flex', justifyContent: 'flex-end', pb: '20px' }}>\n        <AppBar\n            position=\"absolute\"\n            color=\"default\"\n            elevation={0}\n            sx={{\n                position: 'relative',\n                borderBottom: (t) => `1px solid ${t.palette.divider}`,\n            }}\n        >\n            <Toolbar>\n                <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                스티치 계산기\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    </Box>\n    </React.Fragment>\n)\n\n  const Footer = () => {\n      return (\n        <React.Fragment>\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', pt: '110px' }}>\n            <AppBar position=\"fixed\" \n                color=\"default\"\n                elevation={4}\n                sx={{ \n                    top: 'auto', \n                    bottom: 0,\n                    pt: '10px',\n                    pb: '30px',\n                    borderTop: (t) => `1px solid ${t.palette.divider}`,\n                }}>\n                <Toolbar>\n                    <Copyright />\n                </Toolbar>\n            </AppBar>\n        </Box>\n        </React.Fragment>\n      )\n  }\n\nconst AppMain = (props) => {\n    return (\n    <Box sx={{ flexGrow: 1, width: \"100vw\" }}>\n        <AppProvider>\n            <Header />\n            <Typography variant=\"subtitle2\" color=\"inherit\" align=\"center\" \n                sx={{p:2, pb:0}}\n            >\n                아직 실험 중입니다. 오류가 있으면 알려주세요. ^-^\n            </Typography>\n            <Typography variant=\"subtitle2\" color=\"inherit\" align=\"center\" \n                sx={{p:2, pt:0}}\n            >\n                (fleursarang.crochet@gmail.com)\n            </Typography>\n            <Container component=\"main\" maxWidth=\"md\" sx={{ mb: 2 }} >\n                <Typography variant=\"h5\" color=\"inherit\" align=\"center\" \n                    sx={{p:1, color: COLOR_PRIMARY_MAIN}}\n                >\n                    V-Neck Cardigan\n                </Typography>\n\n                <BasicInfo />\n                <SwatchTable />\n                <SexInfo />\n                <SizeInfo />\n                <StartStitches />\n                <SleevesInfo />\n            </Container>\n        </AppProvider>\n        <CssBaseline />\n        <Footer />\n    </Box>\n    )\n}\n\nexport default AppMain;","\nimport React from 'react';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport AppMain from './Containers/AppMain';\nimport { GTM_CONTAINER_ID } from './utils/gaConfig';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport TagManager from 'react-gtm-module';\n\nconst theme = createTheme();\n\n// const addGoogleAnalyticsScript = () => {\n//   return {\n//     _html: `window.dataLayer = windwo.dataLayer || [];\n//       function gtag(){dataLayer.push(arguments);}\n      \n//       gtag(‘js’, new Date());\n//       gtag(‘config’, ‘${gaTrackingId}’, {\n// \t      page_path: window.location.pathname,\n//       });`\n//       // __html: `\n//       //     window.dataLayer = window.dataLayer || [];\n//       //     function gtag(){dataLayer.push(arguments);}\n//       //     gtag('js', new Date());\n\n//       //     gtag('config', '${gaTrackingId}');\n//       //     page_path: window.location.pathname;\n//       // `,\n//   };\n// }\n\n\n// const tagManagerArgs = {\n//   gtmId: GTM_CONTAINER_ID,\n// };\n\n// TagManager.initialize(tagManagerArgs);\nconst GaScript = () => (\n  <Helmet>\n      <title>{\"Fleur Sarang Crochet\"}</title>\n      {/*스크립트 추가*/}\n      {/* <script async src={`https://www.googletagmanager.com/gtag/js?id=${gaTrackingId}`}></script>\n      {/*위에서 생성한 html 추/}\n      <script\n          dangerouslySetInnerHTML={addGoogleAnalyticsScript()}\n      /> */}\n  </Helmet>\n);\n\n\nfunction App() {\n  // useEffect(() => {\n  //   const handleRouteChangeComplete = (url) => {\n  //       if(typeof window === 'object'){\n  //           const { title } = window.document;\n  //           const { href, pathname } = window.location;\n\n  //           window.gtag('config', gaTrackingId, {\n  //               page_title: title,\n  //               page_location: href,\n  //               page_path: pathname,\n  //           });\n  //       }\n  //   };\n  //   // Router.events.on('routeChangeComplete', handleRouteChangeComplete);\n\n  //   // return () => {\n  //   //     Router.events.off('routeChangeComplete', handleRouteChangeComplete);\n  //   // }\n  // });\n\n  return (\n    <HelmetProvider>\n      <ThemeProvider theme={theme}>\n        {/* <GaScript /> */}\n        <CssBaseline />\n        <AppMain />\n      </ThemeProvider>\n    </HelmetProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}