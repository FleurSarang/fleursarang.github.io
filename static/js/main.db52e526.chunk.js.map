{"version":3,"sources":["Components/TableForm.js","Containers/InfoTableContainer.js","Containers/BasicInfo.js","Containers/TitleRow.js","Components/BasicTable.js","utils/constants.js","Containers/SwatchTable.js","Containers/SexInfo.js","Containers/SizeInifo.js","Styles/styles.js","Containers/StartStitches.js","Containers/AppMain.js","App.js","utils/gaConfig.js","reportWebVitals.js","index.js"],"names":["TableForm","props","label","txtInfo","feildLen","length","colSize","labelColSize","Fragment","Grid","container","spacing","padding","flexdirection","justify","justifyContent","alignItems","item","xs","sm","lg","Typography","color","align","sx","mt","fontSize","fontWeight","map","info","idx","variant","TextField","required","id","name","txtLabel","fullWidth","autoComplete","onChange","type","inputProps","inputMode","pattern","InputProps","endAdornment","InputAdornment","position","InfoTableContainer","Paper","my","md","p","children","BasicInfo","basicInfo","TitleRow","titles","Math","round","title","BasicTable","printDirection","items","bg","others","repeat","gridTemplateColumns","colors","bgcolor","style","width","Box","display","columnGap","rowGap","borderRadius","textAlign","BRAND_YOUTUBE","BRAND_INSTAGRAM","BRAND_RAVELRY","BRAND_ETSY","COLOR_PRIMARY_LIGHT","COLOR_WHITE","SwatchTable","context","useContext","appContext","useState","beforeSts","setBeforeSts","beforeRows","setBeforeRows","afterSts","setAfterSts","afterRows","setAfterRows","useEffect","setContractionSts","toFixed","setContractionRows","contractionSts","contractionRows","swatchInfo","e","target","value","results","data","res","SexInfo","sexInfo","SizeInfo","divSleeves","setdivSleeves","neckBack","totalSts","setTotalSts","raglanSts","divide","setSleevesSts","sleevesSts","back","setBackSts","sizeInfo","setNeckBack","setRaglanSts","backSts","linkStyle","styled","size","generateBrandStyles","brand","brandColor","getBrandColor","link","StartStitches","startInfos","React","createContext","displayName","AppProvider","contextValue","Provider","MyLink","brandStyles","styles","makeStyles","Link","className","rel","href","icon","Copyright","flexGrow","Date","getFullYear","faYoutube","faInstagram","faRavelry","faEtsy","Header","pb","AppBar","elevation","borderBottom","t","palette","divider","Toolbar","alight","noWrap","Footer","pt","top","bottom","borderTop","AppMain","Container","component","maxWidth","mb","CssBaseline","theme","createTheme","tagManagerArgs","gtmId","TagManager","initialize","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db52e526.chunk.js","sourcesContent":["import React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport TextField from '@mui/material/TextField';\nimport { InputAdornment } from '@mui/material';\n\nconst TableForm = (props) => {\n    const { label = \"none\", txtInfo=[] } = props;\n    let feildLen = txtInfo.length;\n    const colSize = feildLen > 1 ? (8 / feildLen) : 8;\n    let labelColSize = props.txtInfo ? 3 : 12;\n    \n    return (\n        <React.Fragment>\n            <Grid container \n                 spacing={1} padding={0} \n                 flexdirection=\"row\" justify=\"center\" justifyContent=\"center\" \n                 alignItems=\"ceneter\">\n                \n                <Grid item xs={labelColSize} sm={labelColSize} lg={labelColSize}>\n                    <Typography color=\"primary\" align=\"center\" \n                        sx={{ mt: 2.3, fontSize: \"1em\", fontWeight: 500}} >\n                        {label}\n                    </Typography>\n                </Grid>\n\n                {txtInfo.map((info, idx) => {\n                    let variant = info.variant ? info.variant : \"standard\";\n                    return  (\n                    <Grid item key={idx} xs={colSize} sm={colSize}>\n                        <TextField\n                            required={info.required}\n                            id={info.id}\n                            name={info.id}\n                            label={info.txtLabel}\n                            fullWidth\n                            autoComplete=\"no info\"\n                            variant={variant}\n                            onChange={info.onChange}\n                            type={info.type}\n                            inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }}\n                            InputProps = { { endAdornment: <InputAdornment position=\"end\">{info.endAdornment}</InputAdornment> } }\n                        />\n                    </Grid>\n                    )}\n                    \n                )}\n            </Grid>\n        </React.Fragment>\n        );\n    }\n\nexport default TableForm;","import React from 'react';\nimport Paper from '@mui/material/Paper';\n\n\n\nconst InfoTableContainer = (props) => (\n    <React.Fragment>\n         <Paper variant=\"outlined\" sx={{ my: { xs: 2, md: 3 }, p: 0 }}>\n            {props.children}\n        </Paper>\n    </React.Fragment>\n);\n\n\nexport default InfoTableContainer;","import React from 'react';\nimport TableForm from '../Components/TableForm';\nimport InfoTableContainer from './InfoTableContainer';\n\n\n\nconst BasicInfo = (props) => {\n\n    const basicInfo = [\n        {\n            label: \"실 정보\",\n            txtInfo: [{\n                id: \"yarnInfo\",\n                txtLabel: \"실 정보를 입력하세요\",\n                required: false,\n            }],\n        },\n        {\n            label: \"바늘 사이즈\",\n            txtInfo: [{\n                id: \"needleSize\",\n                txtLabel: \"바늘 사이즈를 입력하세요\",\n                required: false,\n                },\n            ],\n        },\n    ];\n    \n    return (\n    <React.Fragment>\n         <InfoTableContainer>\n            <TableForm label={basicInfo[0].label} txtInfo={basicInfo[0].txtInfo} />\n            <TableForm label={basicInfo[1].label} txtInfo={basicInfo[1].txtInfo} />\n        </InfoTableContainer>\n    </React.Fragment>\n    );\n}\n\n\nexport default BasicInfo;","import React from 'react';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\n\n\n\n\n// function Item(props) {\n//     const { label, value, sx, ...other } = props;\n    \n//     return (\n//         <div style={{ width: '100%' }}>\n//         <Box\n//             sx={{\n//             display: 'grid',\n//             columnGap: 1,\n//             rowGap: 1,\n//             gridTemplateColumns: 'repeat(1, 1fr)',\n//             }}\n//         >\n//             <Box\n//                 sx={{\n//                 bgcolor: 'primary.main',\n//                 color: 'white',\n//                 p: 1,\n//                 borderRadius: 1,\n//                 textAlign: 'center',\n//                 fontSize: '1em',\n//                 fontWeight: '700',\n//                 ...sx,\n//                 }}\n//                 {...other}\n//             >\n//                 {label}\n//             </Box>\n\n//             <Box\n//                 sx={{\n//                     p: 1,\n//                     borderRadius: 1,\n//                     textAlign: 'center',\n//                     fontSize: '1em',\n//                     fontWeight: '700',\n//                     ...sx,\n//                     }}\n//                     {...other}\n//             >\n//                 {value}\n//             </Box>\n\n//         </Box>\n//         </div>\n//     );\n//   }\n  \n//   Item.propTypes = {\n//     sx: PropTypes.object,\n//   };\n\n\n// const TitleRow = (props) => {\n//     const titles = props.titles;\n//     const colSize = Math.round(12 / titles.length);\n//     let fontSize = \"1em\";\n\n//     console.log(\"titles.length:::: \", titles.length);\n\n//     return (\n//         <React.Fragment>\n\n//             <div style={{ width: '100%' }}>\n//             <Box\n//                 sx={{\n//                 display: 'grid',\n//                 columnGap: 1,\n//                 rowGap: 1,\n//                 gridTemplateColumns: 'repeat(9, 1fr)',\n//                 }}\n//             >\n//                 {\n//                     titles.map((title, idx) => (\n//                         <Item key={idx} label={title.label} value={title.value} />\n//                     ))\n//                 }\n//             </Box>\n//             </div>\n\n//             {/* <div style={{ width: '70%' }}>\n//             <Box\n//                 sx={{\n//                 display: 'grid',\n//                 columnGap: 1,\n//                 rowGap: 1,\n//                 gridTemplateColumns: 'repeat(1, 1fr)',\n//                 }}\n//             >\n\n//                 {\n//                     titles.map((title, idx) => (\n//                         <Item key={idx} >\n//                                 {title}\n//                         </Item>\n//                     ))\n//                 }\n//             </Box>\n//             </div> */}\n\n\n// {/* \n//             <Grid container flexdirection=\"column\" justify=\"center\" justifyContent=\"center\" alignItems=\"ceneter\" spacing={2}>\n//             {\n//                 titles.map((title, idx) => (\n//                     <Grid item key={idx} xs={colSize} >\n//                         <Typography color=\"primary\" align=\"center\" variant=\"h6\" \n//                             sx={{ mt: 2.3, fontSize: {fontSize}, fontWeight: 500}} >\n//                             {title}\n//                         </Typography>\n//                     </Grid>\n//                 ))\n//             }\n//             </Grid> */}\n//         </React.Fragment>\n//     );\n// }\n\n\n\n/*\nstartStInfo = {label, value}\n*/\n\n\n// function Item(props) {\n//     const { sx, ...other } = props;\n//     return (\n//       <Box\n//         sx={{\n//           bgcolor: 'primary.main',\n//           color: 'white',\n//           p: 1,\n//           borderRadius: 1,\n//           textAlign: 'center',\n//           fontSize: '1em',\n//           fontWeight: '700',\n//           ...sx,\n//         }}\n//         {...other}\n//       />\n//     );\n//   }\n  \n//   Item.propTypes = {\n//     sx: PropTypes.object,\n//   };\n\n\n// const TitleRow = (props) => {\n//     const titles = props.titles;\n//     const colSize = Math.round(12 / titles.length);\n//     let fontSize = \"1em\";\n\n//     console.log(\"titles.length:::: \", titles.length);\n\n//     return (\n//         <React.Fragment>\n//             <div style={{ width: '70%' }}>\n//             <Box\n//                 sx={{\n//                 display: 'grid',\n//                 columnGap: 1,\n//                 rowGap: 1,\n//                 gridTemplateColumns: 'repeat(1, 1fr)',\n//                 }}\n//             >\n\n//                 {\n//                     titles.map((title, idx) => (\n//                         <Item key={idx} >\n//                                 {title}\n//                         </Item>\n//                     ))\n//                 }\n//             </Box>\n//             </div>\n\n\n// {/* \n//             <Grid container flexdirection=\"column\" justify=\"center\" justifyContent=\"center\" alignItems=\"ceneter\" spacing={2}>\n//             {\n//                 titles.map((title, idx) => (\n//                     <Grid item key={idx} xs={colSize} >\n//                         <Typography color=\"primary\" align=\"center\" variant=\"h6\" \n//                             sx={{ mt: 2.3, fontSize: {fontSize}, fontWeight: 500}} >\n//                             {title}\n//                         </Typography>\n//                     </Grid>\n//                 ))\n//             }\n//             </Grid> */}\n//         </React.Fragment>\n//     );\n// }\n\n\nconst TitleRow = (props) => {\n    const titles = props.titles;\n    const colSize = Math.round(12 / titles.length);\n    let fontSize = \"1em\";\n\n    return (\n        <React.Fragment>\n            <Grid container flexdirection=\"column\" justify=\"center\" justifyContent=\"center\" alignItems=\"ceneter\" spacing={2}>\n            {\n                titles.map((title, idx) => (\n                    <Grid item key={idx} xs={colSize} >\n                        <Typography color=\"primary\" align=\"center\" variant=\"h6\" \n                            sx={{ mt: 2.3, fontSize: {fontSize}, fontWeight: 500}} >\n                            {title}\n                        </Typography>\n                    </Grid>\n                ))\n            }\n            </Grid>\n        </React.Fragment>\n    );\n}\n\nexport default TitleRow;","import React from 'react';\nimport { Box } from '@mui/system';\nimport PropTypes from 'prop-types';\n\n\nconst BasicTable = (props) => {\n    const { printDirection=\"row\", items, bg, sx, ...others } = props;\n\n    // 테이블 출력 방향 row 이면 가로로, col 이면 세로로 출력\n    // repeat() 의 첫 번째 인자가 1이면 행단 1컬럼만 출력 하므로 세로 출력이 된다.\n    let repeat = items.length;\n    if(printDirection === \"column\")  repeat = 1;\n    const gridTemplateColumns = `repeat(${repeat}, 1fr)`;\n\n\n    let colors = {\n        bgcolor: 'primary.light',\n        color: 'white',\n    }\n\n    if(!bg) colors = null;\n\n    return (\n        <div style={{ width: '100%' }}>\n        <Box\n            sx={{\n                display: 'grid',\n                columnGap: 1,\n                rowGap: 1,\n                gridTemplateColumns: {gridTemplateColumns},\n                ...sx,\n            }}\n            {...others}\n        >\n\n        {\n            items.map((item, idx)=>{\n                return (\n                    <Box key={idx}\n                        sx={{\n                            ...colors,\n                            p: 1,\n                            borderRadius: 1,\n                            textAlign: 'center',\n                            fontSize: '1em',\n                            fontWeight: '700',\n                        }}\n                    >\n                        {item}\n                    </Box>\n            \n                );\n        })\n        }\n\n        </Box>\n        </div>\n    );\n}\n\nBasicTable.propTypes = {\n    sx: PropTypes.object,\n};\n\nexport default BasicTable;","export const SITE_NAME = \"Fleur Sarang Crochet\";\nexport const BRAND_YOUTUBE = \"YOUTUBE\";\nexport const BRAND_INSTAGRAM = \"INSTAGRAM\";\nexport const BRAND_RAVELRY = \"RAVELLRY\";\nexport const BRAND_ETSY = \"ETSY\";\nexport const DIVIDE_SLEEVE_COUNT = 7;\n\nexport const COLOR_PRIMARY_MAIN = \"#f06292\";\nexport const COLOR_PRIMARY_DARK = \"#a84466\";\nexport const COLOR_PRIMARY_LIGHT = \"#f381a7\";\nexport const COLOR_WHITE = \"white\";","import React, { useContext, useEffect, useState } from 'react';\nimport TableForm from '../Components/TableForm';\nimport InfoTableContainer from './InfoTableContainer';\nimport ResultForm from '../Components/ResultForm';\nimport { appContext } from './AppMain';\nimport TitleRow from './TitleRow';\nimport BasicTable from '../Components/BasicTable';\nimport { COLOR_PRIMARY_LIGHT, COLOR_WHITE, DIVIDE_SLEEVE_COUNT } from '../utils/constants';\n\n\nconst SwatchTable = (props) => {\n    let context = useContext(appContext);\n    const [beforeSts, setBeforeSts] = useState(0);\n    const [beforeRows, setBeforeRows] = useState(0);\n    const [afterSts, setAfterSts] = useState(0);\n    const [afterRows, setAfterRows] = useState(0);\n\n    useEffect(() => {\n        // 수축률 = 세탁 전 / 세탁 후 * 100\n        if (beforeSts > 0 && afterSts > 0) {\n            let res = (beforeSts / afterSts) * 100;\n            setContractionSts(res.toFixed(2));\n        }\n    }, [beforeSts, afterSts]);\n\n    useEffect(() => {\n        // 수축률 = 세탁 전 / 세탁 후 * 100\n        if(beforeRows > 0 && afterRows > 0) {\n            let res = (beforeRows / afterRows) * 100;\n            setContractionRows(res.toFixed(2));\n        }\n\n    }, [beforeRows, afterRows]);\n\n    const [contractionSts, setContractionSts] = useState(0);\n    const [contractionRows, setContractionRows] = useState(0);\n    \n\n    const handleChangeBeforeStitches = e => {\n        setBeforeSts(e.target.value);\n    }\n\n    const handleChangeBeforeRows = e => {\n        setBeforeRows(e.target.value);\n    }\n    const handleChangeAfterStitches = e => {\n        setAfterSts(e.target.value);\n        context.setAfterSts(e.target.value);\n    }\n\n    const handleChangeAfterRows = e => {\n        setAfterRows(e.target.value);\n    }\n\n    const swatchInfo = [\n        {\n            label: \"세탁 전\",\n            txtInfo: [\n                {\n                    id: \"beforeSts\",\n                    txtLabel: \"(숫자만)\",\n                    type: \"number\",\n                    required: true,\n                    onChange: handleChangeBeforeStitches,\n                    endAdornment: \"코\",\n                },\n                {\n                    id: \"beforeRows\",\n                    txtLabel: \"(숫자만)\",\n                    type: \"number\",\n                    required: true,\n                    onChange: handleChangeBeforeRows,\n                    endAdornment: \"단\",\n                }\n            ],\n        },\n        \n        {\n            label: \"세탁 후\",\n            txtInfo: [\n                {\n                    id: \"afterSts\",\n                    txtLabel: \"(숫자만)\",\n                    type: \"number\",\n                    required: true,\n                    onChange: handleChangeAfterStitches,\n                    endAdornment: \"코\",\n                },\n                {\n                    id: \"afterRows\",\n                    txtLabel: \"(숫자만)\",\n                    type: \"number\",\n                    required: true,\n                    onChange: handleChangeAfterRows,\n                    endAdornment: \"단\",\n                }\n            ],\n        },\n    ];\n\n\n    // const results = [\n    //     {\n    //         label: \"수축률\",\n    //         results: [\n    //             {\n    //                 id: \"resSts\",\n    //                 txtLabel: `${contractionSts} %`,\n    //                 onChange: null,\n    //                 variant: \"filled\",\n    //             },\n    //             {\n    //                 id: \"resRows\",\n    //                 txtLabel: `${contractionRows} %`,\n    //                 onChange: null,\n    //                 variant: \"filled\",\n    //             }\n    //         ],\n    //     },\n    // ];\n\n    const results = [\n        {\n            printDirection: \"row\",\n            sx: {\n                bgcolor: \"#f5f5f5\",\n            },\n            data: [\"수축율\", `${contractionSts} %`, `${contractionRows} %`],\n        },\n    ];\n\n    const rowTitles = [\"Swatch\", \"코 수\", \" 단 수\"];\n\n    return (\n        <React.Fragment>\n             <InfoTableContainer>\n                 <TitleRow titles={rowTitles} />\n\n                {\n                    swatchInfo.map((info, idx) => (\n                        <TableForm key={idx} label={info.label} txtInfo={info.txtInfo} />\n                    ))\n                }\n                {\n                    results.map((res, idx) => (\n                        <BasicTable key={idx} items={res.data}\n                            printDirection={ res.printDirection} sx={{...res.sx}} />\n\n                    ))\n                }\n                \n                 \n                {/* <ResultForm label={results[0].label} results={results[0].results} /> */}\n            </InfoTableContainer>\n        </React.Fragment>\n        );\n}\n\n\nexport default SwatchTable;","import React from 'react';\nimport TableForm from '../Components/TableForm';\nimport InfoTableContainer from './InfoTableContainer';\n\n\n\nconst SexInfo = (props) => {\n\n    const sexInfo = [\n        {\n            label: \"성별\",\n            txtInfo: [{\n                id: \"sexInfo\",\n                txtLabel: \"성별을 입력하세요\",\n            }],\n        },\n    ];\n    \n    return (\n    <React.Fragment>\n         <InfoTableContainer>\n            <TableForm label={sexInfo[0].label} txtInfo={sexInfo[0].txtInfo} />\n        </InfoTableContainer>\n    </React.Fragment>\n    );\n}\n\n\nexport default SexInfo;","import React, { useContext, useEffect, useState } from 'react';\nimport TableForm from '../Components/TableForm';\nimport InfoTableContainer from './InfoTableContainer';\nimport ResultForm from '../Components/ResultForm';\nimport { appContext } from './AppMain';\nimport { COLOR_PRIMARY_LIGHT, COLOR_WHITE, DIVIDE_SLEEVE_COUNT } from '../utils/constants';\nimport BasicTable from '../Components/BasicTable';\nimport { Box } from '@mui/system';\n\nconst SizeInfo = (props) => {\n    // 아래 스테이트들 AppMain Dp context provider 로 옮김\n    // const [neckBack, setNeckBack] = useState(0);\n    // const [raglanSts, setRaglanSts] = useState(2);\n    const [divSleeves, setdivSleeves] = useState(0); // 소매 나눔 수\n    // const [totalSts, setTotalSts] = useState(48); // 총 콧 수\n    // const [sleevesSts, setSleevesSts] = useState(0); // 소매 코수\n    // const [backSts, setBackSts] = useState(0); // 뒷판 코수\n    let context = useContext(appContext);\n\n    useEffect(() => {\n        let afterSts = context.afterSts;\n        let neckBack = context.neckBack;\n        // 총 콧수 = (세탁후 코수 / 10) * 뒷목 둘레\n        if(neckBack > 0){\n            let totalSts = (afterSts / 10) * neckBack;\n            context.setTotalSts(totalSts);\n            context.setTotalSts(totalSts);\n        }\n            \n    }, [context.neckBack, context]);\n\n    useEffect(() => {\n        let totalSts = context.totalSts;\n        let raglanSts = context.raglanSts;\n        if(totalSts > 0){\n            let divide = divSleeves ? divSleeves : DIVIDE_SLEEVE_COUNT;\n            // 소매 콧수 = (총 콧수 / DIVIDE_SLEEVE_COUNT) - (raglanSts / 2)\n            // 반올림\n            context.setSleevesSts(Math.round((totalSts / divide)) - Math.round(raglanSts / 2));\n        }\n\n    }, [context.totalSts, divSleeves, context.raglanSts, context]);\n\n    useEffect(() => {\n        let totalSts = context.totalSts;\n        let sleevesSts = context.sleevesSts;\n        let raglanSts = context.raglanSts;\n        if(totalSts > 0 && raglanSts > 0 && sleevesSts > 0) {\n            // 뒷판 코수 = 총 코수 - (소매 코수 * 2) - 2(양쪽 앞섶?) - (raglanSts * 4)\n            let back = totalSts - (sleevesSts * 2) - (raglanSts * 4) - 2;\n            context.setBackSts(back);\n        }\n    }, [context.totalSts, context.setSleevesSts, context.raglanSts, context]);\n\n\n    const handleChangeNeckBack = e => {\n        context.setNeckBack(e.target.value);\n        context.setNeckBack(e.target.value);\n    }\n\n    const handleChangeRaglanSt = e => {\n        context.setRaglanSts(e.target.value);\n    }\n\n    const handleChangeSleeves = e => {\n        setdivSleeves(e.target.value);\n    }\n\n    const sizeInfo = [\n        {\n            label: \"뒷목 둘레\",\n            txtInfo: [\n                {\n                    id: \"neckBack\",\n                    txtLabel: \"뒷목 둘레를 입력하세요\",\n                    type: \"number\",\n                    required: true,\n                    onChange: handleChangeNeckBack,\n                    endAdornment: \"cm\",\n                }\n            ],\n        },\n        \n        {\n            label: \"래글런코\",\n            txtInfo: [\n                {\n                    id: \"raglanSt\",\n                    txtLabel: \"래글런코를 입력하세요\",\n                    type: \"number\",\n                    required: true,\n                    onChange: handleChangeRaglanSt,\n                    endAdornment: \"코\",\n                },\n            ],\n        },\n        {\n            label: \"소매 나눔 수\",\n            txtInfo: [\n                {\n                    id: \"sleeves\",\n                    txtLabel: \"소매 나눔 수를 입력하세요\",\n                    type: \"number\",\n                    required: true,\n                    onChange: handleChangeSleeves,\n                    \n                },\n            ],\n        },\n    ];\n\n    // const resSts = [\n    //     {\n    //         label: \"총 콧수\",\n    //         results: [\n    //             {\n    //                 id: \"totalSt\",\n    //                 txtLabel: context.totalSts,\n    //                 onChange: null,\n    //                 endAdornment: \"코\",\n    //                 variant: \"filled\",\n    //             }\n    //         ]\n    //     },\n    //     {\n    //         label: \"소매 콧수\",\n    //         results: [\n    //             {\n    //                 id: \"sleevesSts\",\n    //                 txtLabel: context.sleevesSts,\n    //                 onChange: null,\n    //                 endAdornment: \"코\",\n    //                 variant: \"filled\",\n    //             }\n    //         ]\n    //     },\n    //     {\n    //         label: \"뒷판 콧수\",\n    //         results: [\n    //             {\n    //                 id: \"backSts\",\n    //                 txtLabel: context.backSts,\n    //                 onChange: null,\n    //                 endAdornment: \"코\",\n    //                 variant: \"filled\",\n    //             }\n    //         ]\n    //     },\n    // ];\n\n    const results = [\n        {\n            printDirection: \"row\",\n            data: [\"총 콧수\", \"소매 콧수\", \"뒷판 콧수\"],\n        },\n        {\n            printDirection:\"row\",\n            sx: {\n                bgcolor: COLOR_PRIMARY_LIGHT,\n                color: COLOR_WHITE,\n            },\n            data:[context.totalSts, context.sleevesSts, context.backSts],\n        }\n    ]\n    \n    return (\n        <React.Fragment>\n             <InfoTableContainer>\n                 {\n                     sizeInfo.map((info, idx) => (\n                        <TableForm key={idx} label={info.label} txtInfo={info.txtInfo} />\n                     ))\n                 }\n            </InfoTableContainer>\n\n            <InfoTableContainer>\n                {/* <Box\n                    sx={{\n                        display: 'flex',\n                        flexdirection: \"column\",\n                        justify: \"center\",\n                        justifyContent: \"center\",\n                        alignItems: \"ceneter\",\n                    }}\n                > */}\n\n                {\n                    \n                    results.map((res, idx) => (\n                        // <ResultForm key={idx} label={res.label} results={res.results} />\n                        <BasicTable key={idx} items={res.data}  \n                            printDirection={res.printDirection} \n                            sx={{\n                                // border: 0.2,\n                                ...res.sx,\n                            }}\n                        /> \n                    ))\n                }\n\n                {/* </Box> */}\n            </InfoTableContainer>\n        </React.Fragment>\n        );\n}\n\n\nexport default SizeInfo;","import Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\nimport { styled } from '@mui/material/styles';\n\nimport { BRAND_YOUTUBE, BRAND_INSTAGRAM, BRAND_RAVELRY, BRAND_ETSY } from '../utils/constants';\n\n// Create a Title component that'll render an <h1> tag with some styles\nexport const Title = styled(Typography)(\n  ({ color, size, align }) => `\n    font-size: ${ size ? size : \"1.5em\" };\n    text-align: ${ align ? align : \"center\" };\n    color: ${ color ? color : \"palevioletred\" };\n  `\n);\n\n\n// Create a Wrapper component that'll render a <section> tag with some styles\nexport const Wrapper = styled(Box)(\n  ({ bgcolor, padding }) => `\n  padding: ${padding? padding : \"4em\"};\n  background: ${bgcolor ? bgcolor: \"papayawhip\"};\n`,\n);\n\n\nconst linkStyle = {\n  fontSize: '1.5em',\n  padding: 5,\n};\n\nconst getBrandColor = brand => {\n  if (brand === BRAND_YOUTUBE) return \"#E62117\";\n  else if(brand === BRAND_INSTAGRAM) return \"#8a49a1\";\n  else if(brand === BRAND_RAVELRY) return \"#eb6357\";\n  else if(brand === BRAND_ETSY) return \"#eb6d20\";\n}\n\nexport const generateBrandStyles = (brand) => {\n  let brandColor = getBrandColor(brand);\n    return (\n        {\n          link: {\n          ...linkStyle,\n          '&:hover': {\n              fontSize: '2em',\n              color: brandColor,\n          },\n        }\n      }\n    );\n}","import React, { useContext } from 'react';\nimport InfoTableContainer from './InfoTableContainer';\nimport { appContext } from './AppMain';\nimport TitleRow from './TitleRow';\nimport BasicTable from '../Components/BasicTable';\nimport { indigo } from '@mui/material/colors';\nimport { COLOR_PRIMARY_LIGHT, COLOR_WHITE } from '../utils/constants';\n\n\nconst StartStitches = (props) => {\n    let context = useContext(appContext);\n    let raglanSts = context.raglanSts;\n    let sleevesSts = context.sleevesSts;\n    let backSts = context.backSts;\n    \n    // const startInfo = {\n    //     results: [\n    //     {\n    //         id: \"front1\",\n    //         txtLabel: 1,\n    //         onChange: null,\n    //         // endAdornment: \"코\",\n    //         variant: \"filled\",\n    //     },\n    //     {\n    //         id: \"raglanSts1\",\n    //         txtLabel: raglanSts,\n    //         onChange: null,\n    //         // endAdornment: \"코\",\n    //         variant: \"filled\",\n    //     },\n    //     {\n    //         id: \"sleevesSts1\",\n    //         txtLabel: sleevesSts,\n    //         onChange: null,\n    //         // endAdornment: \"코\",\n    //         variant: \"filled\",\n    //     },\n    //     {\n    //         id: \"raglanSts2\",\n    //         txtLabel: raglanSts,\n    //         onChange: null,\n    //         // endAdornment: \"코\",\n    //         variant: \"filled\",\n    //     },\n    //     {\n    //         id: \"backSts\",\n    //         txtLabel: backSts,\n    //         onChange: null,\n    //         // endAdornment: \"코\",\n    //         variant: \"filled\",\n    //     },\n    //     {\n    //         id: \"raglanSts3\",\n    //         txtLabel: raglanSts,\n    //         onChange: null,\n    //         // endAdornment: \"코\",\n    //         variant: \"filled\",\n    //     },\n    //     {\n    //         id: \"sleevesSts2\",\n    //         txtLabel: sleevesSts,\n    //         onChange: null,\n    //         // endAdornment: \"코\",\n    //         variant: \"filled\",\n    //     },\n    //     {\n    //         id: \"fraglanSts4\",\n    //         txtLabel: raglanSts,\n    //         onChange: null,\n    //         // endAdornment: \"코\",\n    //         variant: \"filled\",\n    //     },\n    //     {\n    //         id: \"front2\",\n    //         txtLabel: 1,\n    //         onChange: null,\n    //         // endAdornment: \"코\",\n    //         variant: \"filled\",\n    //     },\n    //     ], \n    // };\n\n    // const rowHeader = [\"시작 코 수\"];\n    // const rowTitles = [\"앞섶\", \"래글런\", \"소매\", \"래글런\", \"뒷판\", \"래글런\", \"소매\", \"래글런\", \"앞섶\"];\n    // const startInfoLable = [1, raglanSts, sleevesSts, raglanSts, backSts, raglanSts, sleevesSts, raglanSts, 1];\n\n    const rowHeader = [\"시작 코 수\"];\n    const rowTitles = {\n        bg: 0,\n        data: [\"앞섶\", \"래글런\", \"소매\", \"래글런\", \"뒷판\", \"래글런\", \"소매\", \"래글런\", \"앞섶\"],\n    };\n    const startInfoLable = {\n        bg: 1,\n        data: [1, raglanSts, sleevesSts, raglanSts, backSts, raglanSts, sleevesSts, raglanSts, 1]\n    };\n\n\n    const startInfo1 = [\n        {\n            label: \"앞섶\",\n            value: 1,\n        },\n        {\n            label: \"레글런\",\n            value: raglanSts,\n        },\n        {\n            label: \"소매\",\n            value: sleevesSts,\n        },\n        {\n            label: \"래글런\",\n            value: raglanSts,\n        },\n        {\n            label: \"뒷판\",\n            value: backSts,\n        },\n        {\n            label: \"래글런\",\n            value: raglanSts,\n        },\n        {\n            label: \"소매\",\n            value: sleevesSts,\n        },\n        {\n            label: \"래글런\",\n            value: raglanSts,\n        },\n        {\n            label: \"앞섶\",\n            value: 1,\n        }\n    ];\n\n    const parseArray = (arr) => {\n        for (const key in arr) {\n\n            if (arr.hasOwnProperty(key)) {\n\n                \n                console.log(`^^^^^^^${key}: ${arr[key]}`);\n            }\n        }\n    }\n\n    // let parseInfo = startInfo.reduce((prev, curr, currentIdx) => {\n    //     if(currentIdx === 1) {\n    //         let info = [[],[]];\n    //         info[0].push(prev.label);\n    //         info[1].push(prev.value);\n\n    //         info[0].push(curr.label);\n    //         info[1].push(curr.value);\n    //         return info;\n    //     } else {\n    //         prev[0].push(curr.label);\n    //         prev[1].push(curr.value);\n    //         return prev;\n    //     }\n    // });\n\n\n    const startInfos = [\n        {\n            bg: 0,\n            printDirection: \"row\",\n            data: [\"앞섶\", \"래글런\", \"소매\", \"래글런\", \"뒷판\", \"래글런\", \"소매\", \"래글런\", \"앞섶\"],\n        },\n        {\n            printDirection: \"row\",\n            sx: {\n                bgcolor: COLOR_PRIMARY_LIGHT,\n                color: COLOR_WHITE,\n            },\n            data: [1, raglanSts, sleevesSts, raglanSts, backSts, raglanSts, sleevesSts, raglanSts, 1]\n        }\n    ];\n\n\n    return (\n        <React.Fragment>\n             <InfoTableContainer>\n                 <TitleRow titles={rowHeader} />\n                 {/* {\n                     parseInfo.map((info, idx) => {\n                        return (<BasicTable items={info} printDirection=\"row\" bg />);\n                     })\n                 } */}\n\n                 {\n                     startInfos.map((info, idx) => {\n                         return (<BasicTable key={idx} items={info.data} bg={info.bg} sx={info.sx} />)\n\n                     })\n                 }\n\n\n\n\n{/* \n                 <BasicTable items={rowTitles} printDirection=\"row\" />\n                 <BasicTable items={startInfoLable} bg /> */}\n            </InfoTableContainer>\n        </React.Fragment>\n        );\n}\n\nexport default StartStitches;","import React, { useEffect, useState } from 'react';\nimport Container from '@mui/material/Container';\nimport Typography from '@mui/material/Typography';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport BasicInfo from './BasicInfo';\nimport SwatchTable from './SwatchTable';\nimport SexInfo from './SexInfo';\nimport Box from '@mui/material/Box';\nimport SizeInfo from './SizeInifo';\nimport { CssBaseline, Grid, Link } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faYoutube, faInstagram, faRavelry, faEtsy } from '@fortawesome/free-brands-svg-icons'\nimport { BRAND_YOUTUBE, BRAND_INSTAGRAM, BRAND_RAVELRY, BRAND_ETSY } from '../utils/constants';\nimport { generateBrandStyles } from '../Styles/styles';\nimport StartStitches from './StartStitches';\n\n\nexport const appContext = React.createContext();\nappContext.displayName = '컨텍스트!!!!!';\nconst AppProvider = (props) => {\n    const [afterSts, setAfterSts] = useState(0); // 세탁후 스와치 코수\n    const [neckBack, setNeckBack] = useState(0); // 뒷목 둘레\n    const [totalSts, setTotalSts] = useState(0); // 총 코수\n    const [sleevesSts, setSleevesSts] = useState(0); // 소매 코수\n    const [backSts, setBackSts] = useState(0); // 뒷판 코수\n    const [raglanSts, setRaglanSts] = useState(2); // raglan\n\n    const contextValue = {afterSts, setAfterSts, neckBack, setNeckBack, totalSts, setTotalSts,\n        sleevesSts, setSleevesSts, backSts, setBackSts, raglanSts, setRaglanSts\n    };\n    return (\n        <appContext.Provider value={contextValue}>\n            {props.children}\n        </appContext.Provider>\n    );\n}\n\n\nconst MyLink = (props) => {\n    let brandStyles = generateBrandStyles(props.brand);\n    let styles = makeStyles(brandStyles)();\n\n    return (\n    <React.Fragment>\n        <Link className={styles.link} sx={{ color:'inherit' }}\n            target=\"_blank\" rel=\"noopener\" \n            href={props.href}\n        >\n            <FontAwesomeIcon icon={props.icon} />\n        </Link>{' '}\n    </React.Fragment>\n    );\n}\n\nconst Copyright = () => {\n    return (\n    <React.Fragment>\n    <Grid container flexdirection=\"column\" justify=\"center\" justifyContent=\"center\" spacing={1} alignItems=\"center\"\n        sx={{ flexGrow: 1 }}\n    >\n        <Grid item sm={12}>\n            <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n                {'Copyright © Fleur Sarang Crochet'}{' '}\n                {new Date().getFullYear()}\n                {'.'}\n            </Typography>\n        </Grid>\n\n        <Grid item sm={12}>\n            <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\"\n                sx={{}}\n            >\n                <MyLink href=\"https://www.youtube.com/c/FleurSarangCrochet\" icon={faYoutube} brand={BRAND_YOUTUBE} />\n                <MyLink href=\"https://www.instagram.com/fleursarang\" icon={faInstagram} brand={BRAND_INSTAGRAM} />\n                <MyLink href=\"https://www.ravelry.com/patterns/sources/fleurs-sarangs-ravelry-store\" icon={faRavelry} brand={BRAND_RAVELRY} />\n                <MyLink href=\"https://www.etsy.com/shop/FleurSarang\" icon={faEtsy} brand={BRAND_ETSY} />\n            </Typography>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n    );\n  }\n\nconst Header = () => (\n    <React.Fragment>\n    <Box sx={{ display: 'flex', justifyContent: 'flex-end', pb: '60px' }}>\n        <AppBar\n            position=\"absolute\"\n            color=\"default\"\n            elevation={0}\n            sx={{\n                position: 'relative',\n                borderBottom: (t) => `1px solid ${t.palette.divider}`,\n            }}\n        >\n            <Toolbar>\n                <Typography alight=\"center\" variant=\"h6\" color=\"inherit\" noWrap>\n                스티치 계산기\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    </Box>\n    </React.Fragment>\n)\n\n  const Footer = () => {\n      return (\n        <React.Fragment>\n        <Box sx={{ display: 'flex', justifyContent: 'flex-end', pt: '110px' }}>\n            <AppBar position=\"fixed\" \n                color=\"default\"\n                elevation={4}\n                sx={{ \n                    top: 'auto', \n                    bottom: 0,\n                    pt: '10px',\n                    pb: '30px',\n                    borderTop: (t) => `1px solid ${t.palette.divider}`,\n                }}>\n                <Toolbar>\n                    <Copyright />\n                </Toolbar>\n            </AppBar>\n        </Box>\n        </React.Fragment>\n      )\n  }\n\nconst AppMain = (props) => {\n\n    return (\n    <Box sx={{ flexGrow: 1, width: \"100vw\" }}>\n        <AppProvider>\n            <Header />\n            <Typography variant=\"h6\" color=\"inherit\" noWrap align=\"center\" \n                sx={{pt: 3}}\n            >\n                아직 실험 중입니다. 오류가 있으면 알려주세요. ^-^\n            </Typography>\n            <Typography variant=\"h6\" color=\"inherit\" noWrap align=\"center\" \n                sx={{pb: 3}}\n            >\n                (fleursarang.crochet@gmail.com)\n            </Typography>\n            <Container component=\"main\" maxWidth=\"md\" sx={{ mb: 2 }} >\n                <BasicInfo />\n                <SwatchTable />\n                <SexInfo />\n                <SizeInfo />\n                <StartStitches />\n            </Container>\n        </AppProvider>\n        <CssBaseline />\n        <Footer />\n    </Box>\n    )\n}\n\nexport default AppMain;","\nimport React, { useEffect } from 'react';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport AppMain from './Containers/AppMain';\nimport { gaTrackingId, GTM_CONTAINER_ID } from './utils/gaConfig';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport TagManager from 'react-gtm-module';\n\nconst theme = createTheme();\n\n// const addGoogleAnalyticsScript = () => {\n//   return {\n//     _html: `window.dataLayer = windwo.dataLayer || [];\n//       function gtag(){dataLayer.push(arguments);}\n      \n//       gtag(‘js’, new Date());\n//       gtag(‘config’, ‘${gaTrackingId}’, {\n// \t      page_path: window.location.pathname,\n//       });`\n//       // __html: `\n//       //     window.dataLayer = window.dataLayer || [];\n//       //     function gtag(){dataLayer.push(arguments);}\n//       //     gtag('js', new Date());\n\n//       //     gtag('config', '${gaTrackingId}');\n//       //     page_path: window.location.pathname;\n//       // `,\n//   };\n// }\n\n\nconst tagManagerArgs = {\n  gtmId: GTM_CONTAINER_ID,\n};\n\nTagManager.initialize(tagManagerArgs);\nconst GaScript = () => (\n  <Helmet>\n      <title>{\"Fleur Sarang Crochet\"}</title>\n      {/*스크립트 추가*/}\n      {/* <script async src={`https://www.googletagmanager.com/gtag/js?id=${gaTrackingId}`}></script>\n      {/*위에서 생성한 html 추/}\n      <script\n          dangerouslySetInnerHTML={addGoogleAnalyticsScript()}\n      /> */}\n  </Helmet>\n);\n\n\nfunction App() {\n  // useEffect(() => {\n  //   const handleRouteChangeComplete = (url) => {\n  //       if(typeof window === 'object'){\n  //           const { title } = window.document;\n  //           const { href, pathname } = window.location;\n\n  //           window.gtag('config', gaTrackingId, {\n  //               page_title: title,\n  //               page_location: href,\n  //               page_path: pathname,\n  //           });\n  //       }\n  //   };\n  //   // Router.events.on('routeChangeComplete', handleRouteChangeComplete);\n\n  //   // return () => {\n  //   //     Router.events.off('routeChangeComplete', handleRouteChangeComplete);\n  //   // }\n  // });\n\n  return (\n    <HelmetProvider>\n      <ThemeProvider theme={theme}>\n        {/* <GaScript /> */}\n        <CssBaseline />\n        <AppMain />\n      </ThemeProvider>\n    </HelmetProvider>\n  );\n}\n\nexport default App;\n","// google analytics\nexport const gaTrackingId = \"G-LW1CK49GHY\";\nexport const GTM_CONTAINER_ID = \"GTM-PXTQNBK\";\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}